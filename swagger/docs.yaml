openapi: "3.0.0"
info:
  version: 1.0.0
  title: 'Automatic Timetable'
servers:
  - url: http://localhost:80/api/v1
    description: 'Localhost API server'
  - url: http://atc.mustafin.dev/api/v1
    description: 'Production API server'
paths:
  "/users/signup/":
    post:
      summary: 'Register user in the system'
      description: 'Returns created user with its new id'
      operationId: user_sign_up
      tags:
        - "users"
        - "auth"
      requestBody:
        description: 'User to sign up'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreation'
      responses:
        '201':
          description: 'User was successfully signed up'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: 'Invalid data was provided'
  "/users/login/":
    post:
      summary: 'Login user into the system'
      description: 'Returns token for logging into the system'
      operationId: user_sign_in
      tags:
        - "users"
        - "auth"
      requestBody:
        description: 'User data to sign in'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
                - password
              properties:
                email:
                  type: email
                  example: b.doe@innopolis.ru
                password:
                  type: string
      responses:
        '200':
          description: 'User was successfully signed in'
          content:
            application/json:
              schema:
                properties:
                  token:
                    type: string
                    example: '014c593818e4642621b77dcdfa4a99ac17878000'
        '400':
          description: 'Invalid data was provided'
  "/users/profile/":
    get:
      summary: 'User profile'
      description: 'Returns user profile'
      operationId: user_profile
      tags:
        - "users"
      security:
        - TokenAuth: []
      responses:
        '200':
          description: 'User was successfully signed in'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    put:
      summary: 'User profile'
      description: 'Returns user profile'
      operationId: user_profile
      tags:
        - "users"
      security:
        - TokenAuth: []
      requestBody:
        description: 'User to sign up'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreation'
      responses:
        '200':
          description: 'User was successfully modified'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
  "/users/year_groups/":
    get:
      summary: 'User year groups'
      description: 'Returns students year groups'
      operationId: user_year_groups
      tags:
        - "users"
      security:
        - TokenAuth: []
      responses:
        '200':
          description: 'User year groups have been returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YearGroup'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    post:
      summary: 'Creates a year group'
      description: 'Creates a year group'
      operationId: user_create_year_group
      tags:
        - "users"
      security:
        - TokenAuth: []
      requestBody:
        description: 'Group Year to create'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YearGroup'
      responses:
        '201':
          description: 'Group Year successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YearGroup'
        '400':
          description: 'Incorrect year group data was provided'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
  "/users/year_groups/{id}/":
    put:
      summary: 'Updates year group by id'
      operationId: update_year_group_by_id
      tags:
        - "users"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - TokenAuth: []
      requestBody:
        description: 'New year group data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/YearGroup'
      responses:
        '200':
          description: 'YearGroup was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YearGroup'
        '400':
          description: 'Incorrect year group data was provided'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          description: 'Year group with such id was not found'
    delete:
      summary: 'Removes year group by id'
      operationId: delete_year_group_by_id
      tags:
        - "users"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - TokenAuth: []
      responses:
        '200':
          description: 'Year Group was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/YearGroup'
        '404':
          description: 'Year Group with such id was not found'
  "/users/groups/":
    get:
      summary: 'User groups'
      description: 'Returns students groups'
      operationId: get_user_groups
      tags:
        - "users"
      security:
        - TokenAuth: []
      responses:
        '200':
          description: 'User groups have been returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
    post:
      summary: 'Creates a group'
      description: 'Creates a group'
      operationId: user_create_group
      tags:
        - "users"
      security:
        - TokenAuth: []
      requestBody:
        description: 'Group to create'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: 'Group successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: 'Incorrect group data was provided'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
  "/users/groups/{id}/":
    put:
      summary: 'Updates group by id'
      operationId: update_group_by_id
      tags:
        - "users"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - TokenAuth: []
      requestBody:
        description: 'New group data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: 'Group was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: 'Incorrect group data was provided'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          description: 'Group with such id was not found'
    delete:
      summary: 'Removes group by id'
      operationId: delete_group_by_id
      tags:
        - "users"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - TokenAuth: []
      responses:
        '200':
          description: 'Group was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: 'Group with such id was not found'

  "/users/{id}/groups/{id}/":
    put:
      summary: 'Add user to a group'
      description: 'Add user with id to a group with id'
      operationID: add_user_to_a_group
      tags:
        - "users"
      security:
        - TokenAuth: []
      responses:
        '200':
          description: 'User have been added to a group'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          description: 'User or group with such id does not exist'

  /rooms/items/:
    get:
      summary: 'Returns items'
      operationId: get_items
      tags:
        - "items"
      responses:
        '200':
          description: 'Items successfully returned'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    post:
      summary: 'Creates item'
      description: 'Returns created item with its new id'
      operationId: create_item
      tags:
        - "items"
      security:
        - TokenAuth: []
      requestBody:
        description: 'Item to create'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: 'Item was successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: 'Invalid item was provided'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /rooms/items/{id}/:
    get:
      summary: 'Returns item by id'
      operationId: get_item_by_id
      tags:
        - "items"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Item was found and returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: 'Item with such id was not found'
    put:
      summary: 'Updates item by id'
      operationId: update_item_by_id
      tags:
        - "items"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - TokenAuth: []
      requestBody:
        description: 'New item data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: 'Item was updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: 'Incorrect item data was provided'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          description: 'Item with such id was not found'
    delete:
      summary: 'Removes item by id'
      operationId: delete_item_by_id
      tags:
        - "items"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - TokenAuth: []
      responses:
        '200':
          description: 'Item was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '404':
          description: 'Item with such id was not found'

  /rooms/item/types/:
    get:
      summary: 'Returns item types'
      operationId: get_item_types
      tags:
        - "items"
      responses:
        '200':
          description: 'Item types were successfully retrieved'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemType'

  /rooms/:
    get:
      summary: 'Returns rooms'
      operationId: get_rooms
      tags:
        - "rooms"
      responses:
        '200':
          description: 'Rooms successfully returned'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
    post:
      summary: 'Creates room'
      description: 'Returns room with its new id'
      operationId: create_room
      tags:
        - "rooms"
      security:
        - TokenAuth: []
      requestBody:
        description: 'Room to create'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '200':
          description: 'Room successfully created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: 'Incorrect room data was provided'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'

  /rooms/{id}/:
    get:
      summary: 'Returns room by id'
      operationId: get_room_by_id
      tags:
        - "rooms"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Room was found and returned'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: 'Room with such id was not found'
    put:
      summary: 'Updates room by id'
      operationId: update_room_by_id
      tags:
        - "rooms"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - TokenAuth: []
      requestBody:
        description: 'New room data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        '200':
          description: 'Room was successfully updated'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '400':
          description: 'Incorrect room data'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          description: 'Room with such id was not found'
    delete:
      summary: 'Deletes room by id'
      operationId: delete_room_by_id
      tags:
        - "rooms"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - TokenAuth: []
      responses:
        '200':
          description: 'Room was deleted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        '404':
          description: 'Room with such id was not found'

  /rooms/types/:
    get:
      summary: 'Lists room types'
      operationId: get_room_types
      tags:
        - "rooms"
      responses:
        '200':
          description: 'List was successfully retrieved'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomType'

  /rooms/{id}/items/:
    get:
      summary: 'Returns all items in room'
      operationId: get_items_in_room_by_id
      tags:
        - "rooms"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Items were successfully retrieved'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
        '404':
          description: 'Room or item with such id does not exist'
    post:
      summary: 'Adds item(s) in the room'
      operationId: add_item_to_room_by_id
      tags:
        - "rooms"
      description: 'Room in which to add these item(s) is selected by room id'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemNoRoom'
      responses:
        '200':
          description: 'Item(s) was/were successfully added to the room'
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Item'
                  - type: array
                    items:
                      $ref: '#/components/schemas/Item'
        '400':
          description: 'Incorrect item data was provided'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          description: 'Room or item with such id does not exist'

components:
  schemas:
    UserCreation:
      required:
        - email
        - first_name
        - last_name
        - password
      properties:
        email:
          type: email
          example: b.doe@innopolis.ru
        first_name:
          type: string
          example: 'Bob'
        last_name:
          type: string
          example: 'Doe'
    User:
      properties:
        id:
          type: integer
          example: 12
        email:
          type: email
          example: b.doe@innopolis.ru
        first_name:
          type: string
          example: 'Bob'
        last_name:
          type: string
          example: 'Doe'

    Item:
      required:
        - id
        - name
        - type_id
      properties:
        id:
          type: integer
          readOnly: true
          example: 64
          minimum: 0
        name:
          type: string
          example: 'Projector WD40'
        room_id:
          type: integer
          example: 128
          minimum: 0
        type_id:
          type: integer
          example: 122
          minimum: 0
    ItemNoRoom:
      required:
        - id
        - name
        - type_id
      properties:
        id:
          type: integer
          readOnly: true
          example: 64
          minimum: 0
        name:
          type: string
          example: 'Projector WD40'
        type_id:
          type: integer
          example: 122
          minimum: 0
    ItemType:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 122
          minimum: 0
        name:
          type: string
          example: 'Projector'

    Room:
      required:
        - id
        - number
      properties:
        id:
          type: integer
          readOnly: true
          example: 128
          minimum: 0
        number:
          type: integer
          example: 403
        type_id:
          type: integer
          example: 12
        capacity:
          type: integer
          example: 60
        is_yellow:
          type: boolean
          example: true
    RoomType:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          example: 12
        name:
          type: string
          example: 'Lecture hall'
    Group:
      properties:
        id:
          type: integer
          readOnly: true
          minimum: 0
          example: 1
        number:
          type: integer
          example: 3
        year_id:
          type: integer
          example: 1
    YearGroup:
      properties:
        id:
          type: integer
          readOnly: true
          minimum: 0
          example: 1
        year:
          type: integer
          example: 2017
        type:
          type: integer
          enum: [0, 1]
          example: 1



  responses:
    UnauthorizedResponse:
      description: 'Invalid access token was provided for this operation'

  securitySchemes:
    TokenAuth:
      type: http
      scheme: bearer
      description: Token-based authentication
      bearerFormat: Token
