image: docker:latest

services:
  - docker:dind

stages:
  - build
  - test
  - deploy

before_script:
  - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  - docker info
  - apk add --no-cache py-pip
  - pip install docker-compose --no-cache-dir

docker-build:
  stage: build
  script:
    - docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME}_python -f docker/app/Dockerfile .
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME}_python
    - docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME}_backendweb -f docker/nginx/Dockerfile docker/nginx/ --no-cache
    - docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:_${CI_COMMIT_REF_NAME}_backendweb

test:
  stage: test
  script:
    - docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME}_python
    - docker-compose -f docker-compose.autotest.yml run python
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  after_script:
    - docker-compose -f docker-compose.autotest.yml down -v


deploy:
  stage: deploy
  script:
    - docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}:${CI_COMMIT_REF_NAME}
    - docker-compose -f docker-compose.prod.yml -p $CI_PROJECT_NAME stop || echo
    - docker-compose -f docker-compose.prod.yml -p $CI_PROJECT_NAME rm -f || echo
    - docker-compose -f docker-compose.prod.yml -p $CI_PROJECT_NAME up -d
  only:
    - master
  tags:
    - docker
    - atc

